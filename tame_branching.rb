#!/usr/bin/env ruby -w
## author: stephanmg <stephan@syntaktischer-zucker.de>
## summary: curates SWC, e.g. shifts multi branches, merges soma, fixes identifiers
## note: assumes that the root node of the SWC file (-1) has to be of soma type 

# libraries
require 'optparse'

# constants
Message = "Usage: tame_branching.rb FILENAME [options] [-hdi]"
Header = "# This file has been generated by TAME_BRANCHING"
NumSupportedBranches = 2
SomaRoot = -1
SomaType = 1
DendriteType = 4

# options
def usage() puts Message end

options = {}
OptionParser.new do |opts|
  opts.banner = Message
  opts.on('-f', '--filename FILENAME', 'File name') { |file| options[:file_name] = file }
  opts.on('-d', '--dryrun', 'Dry run - Just show multi branching') { |d| options[:dryrun] = d }
  opts.on('-h', '--help', 'Display a help message') { |h| options[:help] = h; puts opts }
  opts.on('-i', '--identifier', 'Correct identifiers') { |i| options[:identifier] = i }
end.parse!

if options[:file_name].nil?
   if not options[:help] then usage() end
   exit()
end

# read data and drop header comments starting with a hash 
$, = " "
$; = " "
lines = []
File.foreach(options[:file_name]).each do |line|
  lines << line.split.each_with_index.map { |elem, i| ([0,1,6].include?i) ? elem.to_i : elem.to_f } if not line =~ /^#/;
end

# correct identifiers 
if options[:identifier]
  lines.each do |line|
    case line[1]
    when 1 then line[1] = DendriteType
    when 2 then line[1] = SomaType
    end
  end
end

# find duplicated parent ids for multi branches
duplicates = lines.map(&:last).tap do |indices|
  indices.select{ |e| indices.count(e) > NumSupportedBranches }.uniq
end
encountered = Hash[ *duplicates.collect { |v| [ v, 0 ] }.flatten ]

if options[:dryrun] 
  puts "Multi-branches (n > #{NumSupportedBranches}): #{duplicates}"
  exit()
end

# shift branches (Could check if soma type, but soma will be merged anyway later)
lines.each do |line|
    id = line[-1]
    if duplicates.include?(id)
      encountered[id] = encountered[id] + 1
      if encountered[id] > NumSupportedBranches
        line[-1] = line[-1] + encountered[id] - 1 
      end
    end
end

# merge soma vertices
indices = lines.select{ |arr| arr[1] == SomaType and arr.last != SomaRoot}.map { |el| el.first }
numSomaPoints = indices.length
lines_clean = []
lines.each { |line| lines_clean << line if not indices.include?(line.first) }

# output a new SWC file
puts Header
offset=-1
lines_clean.each_with_index do |line, index|
  if index == 0 then puts line.join end

  if index == 1 
    offset = line.last - 1 
    line[0] = line[-1] - offset + 1
    line[-1] = line[-1] - offset
    puts line.join
  end
  
  if index > 1
     if index > numSomaPoints and line[-1] < numSomaPoints 
         line[-1] = 1
     else
        line[-1] = line[-1] - offset
     end
        line[0] = line[0] - offset
        puts line.join
  end
end
